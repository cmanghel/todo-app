{"version":3,"sources":["App.tsx","index.tsx"],"names":["InputRow","props","handleSubmit","e","preventDefault","saveInput","emptyList","onSubmit","autoFocus","type","placeholder","onChange","handleInput","target","value","taskToAdd","checked","allCompleted","onClick","toggleAllCompleted","ItemRow","isEditing","saveEdit","task","handleEdit","onBlur","completed","toggleCompleted","onDoubleClick","startEdit","deleteItem","OptionsRow","buttons","map","view","name","viewOption","handleChangeView","Pluralize","itemsLeft","clearCompleted","App","state","items","beingEdited","bind","renderTask","i","this","setState","every","item","forEach","slice","splice","concat","filter","length","row","tasks","className","changeViewTo","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b719c3d.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from 'react';\nimport './App.scss';\nimport Pluralize from 'pluralize';\n\ninterface InputRowProps {\n  allCompleted: boolean;\n  emptyList: boolean;\n  taskToAdd: string;\n  toggleAllCompleted: () => void;\n  handleInput: (value: string) => void;\n  saveInput: () => void;\n}\n\nfunction InputRow(props: InputRowProps): JSX.Element {\n\n  const handleSubmit = (e: any) => {\n     e.preventDefault();\n     props.saveInput();\n   }\n\n  return props.emptyList ? (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n        <input\n          autoFocus\n          type=\"text\"\n          placeholder=\"Add a new task\"\n          onChange={(e) => props.handleInput(e.target.value)}\n          value={props.taskToAdd}\n        />\n      </form>\n    </div>\n  ) : (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"checkbox\"\n          checked={props.allCompleted}\n          onClick={props.toggleAllCompleted}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Add a new task\"\n          onChange={(e) => props.handleInput(e.target.value)}\n          value={props.taskToAdd}\n        />\n      </form>\n    </div>\n  )\n}\n\ninterface ItemRowProps {\n  value: ItemData;\n  isEditing: boolean;\n  toggleCompleted: () => void;\n  startEdit: () => void;\n  saveEdit: () => void;\n  handleEdit: (value: string) => void;\n  deleteItem: () => void;\n}\n\nfunction ItemRow(props: ItemRowProps): JSX.Element {\n  if (props.isEditing) {\n    return(\n      <div>\n        <form onSubmit={props.saveEdit}>\n          <input\n            autoFocus\n            type=\"text\"\n            value={props.value.task}\n            onChange={(e) => props.handleEdit(e.target.value)}\n            onBlur={props.saveEdit}\n          />\n        </form>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={props.value.completed}\n          onClick={props.toggleCompleted}\n        />\n        <span onDoubleClick={props.startEdit}>\n          {props.value.task}\n        </span>\n        <span>&nbsp;&nbsp;&nbsp;</span>\n        <button onClick={props.deleteItem}>X</button>\n      </div>\n    )\n  }\n}\n\ninterface OptionsRowProps {\n  itemsLeft: number;\n  viewOption: ViewType;\n  emptyList: boolean;\n  handleChangeView: (value: ViewType) => void;\n  clearCompleted: () => void;\n}\n\nfunction OptionsRow(props: OptionsRowProps): JSX.Element | null {\n  const views: ViewType[] = [\"All\", \"Active\", \"Completed\"];\n\n  const buttons = views.map(view =>\n  <label>\n    <input\n      type=\"radio\"\n      name=\"view\"\n      value={view}\n      checked={props.viewOption === view}\n      onChange={(e) => props.handleChangeView(view)}\n      />\n    {view}\n  </label>\n  );\n\n  return !props.emptyList ? (\n    <div>\n      <span>{Pluralize('item', props.itemsLeft, true)} left</span>\n      <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n      {buttons}\n      <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n      <button onClick={props.clearCompleted}>Clear completed</button>\n    </div>\n  ) : (\n    null\n    )\n}\n\n\ntype ItemData = {\n  task : string;\n  completed: boolean;\n}\n\ntype ViewType = \"All\" | \"Active\" | \"Completed\"\n\ninterface AppProps {\n}\n\ninterface AppState {\n  items: ItemData[];\n  beingEdited: number | null;\n  taskToAdd: string;\n  viewOption: ViewType;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      items:[{task: \"foo bar\", completed: false}],\n      beingEdited: null,\n      taskToAdd: \"\",\n      viewOption: \"All\"\n    }\n    this.toggleCompleted = this.toggleCompleted.bind(this);\n    this.toggleAllCompleted = this.toggleAllCompleted.bind(this);\n    this.renderTask = this.renderTask.bind(this);\n    this.startEdit = this.startEdit.bind(this);\n    this.saveEdit = this.saveEdit.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.allCompleted = this.allCompleted.bind(this);\n    this.saveInput = this.saveInput.bind(this);\n    this.itemsLeft = this.itemsLeft.bind(this);\n    this.clearCompleted = this.clearCompleted.bind(this);\n  }\n\n  toggleCompleted(i: number): void {\n    this.state.items[i].completed = !this.state.items[i].completed;\n    this.setState({items: this.state.items});\n  }\n\n  allCompleted(): boolean {\n    return this.state.items.every((item: ItemData) => item.completed);\n  }\n\n  toggleAllCompleted(): void {\n    if (!this.allCompleted()) {\n      this.state.items.forEach(item => {item.completed = true})\n      this.setState({items: this.state.items})\n    }\n    else {\n      this.state.items.forEach(item => {item.completed = !item.completed})\n      this.setState({items: this.state.items})\n    }\n  }\n\n  startEdit(i: number): void {\n    this.setState({beingEdited: i});\n  }\n\n  handleEdit(i: number, value: string): void {\n    this.state.items[i].task = value;\n    this.setState({items: this.state.items});\n  }\n\n  saveEdit(i: number): void {\n    this.setState({beingEdited: null});\n  }\n\n  deleteItem(i: number): void {\n    const items = this.state.items.slice();\n    items.splice(i, 1);\n    this.setState({items});\n  }\n\n  handleInput(value: string): void {\n    this.setState({taskToAdd: value});\n  }\n\n  saveInput(): void {\n    if (!this.state.taskToAdd) return;\n    this.setState({\n      items: this.state.items.concat({task: this.state.taskToAdd, completed: false}),\n      taskToAdd: \"\"\n    });\n  }\n\n  itemsLeft(): number {\n    return this.state.items.filter(item => !item.completed).length\n  }\n\n  clearCompleted(): void {\n    this.setState({items: this.state.items.filter(item => !item.completed)})\n  }\n\n  changeViewTo(value: ViewType): void {\n    this.setState({viewOption: value})\n  }\n\n  renderTask(i: number): JSX.Element | null {\n    const row: JSX.Element = <ItemRow\n      value={this.state.items[i]}\n      isEditing={this.state.beingEdited === i}\n      toggleCompleted={() => this.toggleCompleted(i)}\n      startEdit={() => this.startEdit(i)}\n      handleEdit={(value) => this.handleEdit(i, value)}\n      saveEdit={() => this.saveEdit(i)}\n      deleteItem={() => this.deleteItem(i)}\n      />\n      switch (this.state.viewOption) {\n        case \"All\":\n          return row;\n          break;\n        case \"Active\":\n          return this.state.items[i].completed ? null : row;\n          break;\n        case \"Completed\":\n          return this.state.items[i].completed ? row : null;\n          break;\n        }\n      }\n\n  render(): JSX.Element {\n    const tasks = this.state.items.map((item, i) => this.renderTask(i));\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <InputRow\n          allCompleted={this.allCompleted()}\n          toggleAllCompleted={this.toggleAllCompleted}\n          saveInput={() => this.saveInput()}\n          emptyList={this.state.items.length === 0}\n          taskToAdd={this.state.taskToAdd}\n          handleInput={(value) => this.handleInput(value)}\n        />\n      </header>\n      <div>\n        {tasks}\n      </div>\n      <div>\n        <OptionsRow\n          itemsLeft={this.itemsLeft()}\n          viewOption={this.state.viewOption}\n          emptyList={this.state.items.length === 0}\n          clearCompleted={this.clearCompleted}\n          handleChangeView={(value) => this.changeViewTo(value)}\n        />\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}